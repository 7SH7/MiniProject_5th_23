server:
  port: 8080

spring:
  application:
    name: reader
---

spring:
  profiles: default
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        implicit_naming_strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl
  cloud:
    stream:
      kafka:
        binder:
          brokers: localhost:9092
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        event-in:
          group: reader
#<<< EDA / Topic Name
          destination: untitled
#>>> EDA / Topic Name
          contentType: application/json
        event-out:
#<<< EDA / Topic Name
          destination: untitled
#>>> EDA / Topic Name
          contentType: application/json
jwt:
  secret: alEsuzfbMMJ3rjaiNfPnfHABuTWApPBnhfgmItTC5eOwhpDOmcqo+hdR9ztmU9dp
  access-token-validity-in-seconds: 3600

logging:
  level:
    org.hibernate.type: trace
    org.springframework.cloud: debug


server:
  port: 8084

---

spring:
  profiles: docker
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        implicit_naming_strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl
  cloud:
    stream:
      kafka:
        binder:
          brokers: my-kafka:9092
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        event-in:
          group: reader
          destination: untitled
          contentType: application/json
        event-out:
          destination: untitled
          contentType: application/json

jwt:
  secret: b2f52f5c3b0011a7aa99c73e3e714e8436867855efc0c24fc2a753752415fd10
  access-token-validity-in-seconds: 3600

eureka:
  client:
    register-with-eureka: true       # Eureka에 자신 등록
    fetch-registry: true             # 다른 서비스 탐색 허용
    service-url:
      defaultZone: http://130.107.221.205:8761/eureka/  # 실제 Eureka 서버 주소

  instance:
    prefer-ip-address: true          # IP 기준 등록 (도커 환경에서는 필수)